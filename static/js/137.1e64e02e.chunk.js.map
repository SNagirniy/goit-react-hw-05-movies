{"version":3,"file":"static/js/137.1e64e02e.chunk.js","mappings":"iSACA,GAAgB,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,2BAA2B,MAAQ,2BAA2B,MAAQ,2BAA2B,KAAO,2B,SCIvLA,EAAc,SAAC,GAOrB,IANLC,EAMI,EANJA,OACAC,EAKI,EALJA,MACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,OACAC,EACI,EADJA,SAEA,OACE,iBAAKC,UAAWC,EAAAA,KAAhB,WACE,gBAAID,UAAWC,EAAAA,MAAf,UACGN,EADH,KACYC,EADZ,QAGA,eAAGI,UAAWC,EAAAA,MAAd,oBAA+BJ,MAC/B,yBACGH,GACC,gBACEM,UAAWC,EAAAA,MACXC,IAAG,yCAAoCR,GACvCS,IAAKR,KAGP,gBAAKK,UAAWC,EAAAA,MAASC,IAAKE,EAAWD,IAAK,wBAIlD,gBAAIH,UAAWC,EAAAA,OAAf,oBAEGH,GACCA,EAAOO,KAAI,SAAAC,GACT,IAAMC,EChBL,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfD,EAAK,GACLE,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfD,GADEM,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAON,EDCcS,GACX,OACE,iBAAMhB,UAAWC,EAAAA,MAAjB,SACGK,EAAMW,MADsBV,UAMvC,oBAASP,UAAWC,EAAAA,KAApB,SAA6BF,QAKnCN,EAAYyB,WAAa,CACvBxB,OAAQyB,IAAAA,OAAAA,WACRxB,MAAOwB,IAAAA,OAAAA,WACPvB,KAAMuB,IAAAA,OAAAA,WACNtB,MAAOsB,IAAAA,OAAAA,WACPrB,OAAQqB,IAAAA,MAAAA,WACRpB,SAAUoB,IAAAA,OAAAA,YErDZ,MAAuB,+BAAvB,EAAiE,mCAAjE,EAAuH,2CAAvH,EAAiL,uCAAjL,EAAkO,kCAAlO,EAA8Q,kCCuE9Q,EAlE0B,WACxB,IASgBC,EATRC,GAAWC,EAAAA,EAAAA,MAAXD,OACFE,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KA6BA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,2FACdF,GAAW,GADG,mBAGWG,EAAAA,EAAAA,IAASX,GAHpB,UAIiB,KADvBY,EAHM,QAICC,KAAKC,OAJN,iDAOZR,EAAQM,EAASC,MAPL,kDASZE,QAAQC,IAAR,MACAV,EAAQ,MAVI,yBAYZE,GAAW,GAZC,6EAAH,qDAebE,MACC,CAACV,KAGF,gCACGO,IAAW,gBAAK5B,UAAWC,EAAhB,0BACZ,mBAAQD,UAAWC,EAAYqC,QA9BpB,WACbf,GAAU,IA6BR,sBAGA,kBAAMvB,UAAWC,EAAjB,UACGyB,GACC,SAACjC,EAAD,CACEC,OAAQgC,EAAKa,YACb5C,MAAO+B,EAAKc,eACZ5C,MAlCMwB,EAkCQM,EAAKe,aAjCpB,IAAIC,KAAKtB,GAAMuB,eAkCd9C,MAAO6B,EAAKkB,aACZ9C,OAAQ4B,EAAK5B,OACbC,SAAU2B,EAAK3B,YAGjB,cAAGC,UAAWC,EAAd,6BAEF,iBAAKD,UAAWC,EAAhB,WACE,SAAC,KAAD,CAAMD,UAAWC,EAAgB4C,GAAE,kBAAaxB,EAAb,SAAnC,mBAGA,SAAC,KAAD,CAAMrB,UAAWC,EAAgB4C,GAAE,kBAAaxB,EAAb,YAAnC,sBAGA,SAAC,KAAD,e,yMC/DJyB,EAAU,mCAEHC,EAAa,mCAAG,8FACdC,IAAAA,IAAA,gEAC8CF,IAFhC,mFAAH,qDAKbd,EAAQ,mCAAG,WAAMzB,GAAN,iFACTyC,IAAAA,IAAA,6CAC2BzC,EAD3B,oBACyCuC,EADzC,oBADS,mFAAH,sDAMRG,EAAQ,mCAAG,WAAM1C,GAAN,iFACTyC,IAAAA,IAAA,6CAC2BzC,EAD3B,4BACiDuC,EADjD,oBADS,mFAAH,sDAMRI,EAAW,mCAAG,WAAM3C,GAAN,iFACZyC,IAAAA,IAAA,6CAC2BzC,EAD3B,4BACiDuC,EADjD,2BADY,mFAAH,sDAMXK,EAAU,mCAAG,WAAMC,GAAN,iFACXJ,IAAAA,IAAA,4DAC0CF,EAD1C,4DACqGM,IAF1F,mFAAH,uD","sources":["webpack://react-homework-template/./src/components/DetailsView/DetailsView.module.css?c645","components/DetailsView/DetailsView.js","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/MovieDetailsPage/MovieDetailsPage.module.css?377f","components/MovieDetailsPage/MoviesDetailsPage.js","services/FetchFilms.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"tumb\":\"DetailsView_tumb__QQk5g\",\"image\":\"DetailsView_image__BvaYM\",\"title\":\"DetailsView_title__sl1VO\",\"genre\":\"DetailsView_genre__PfDrf\",\"score\":\"DetailsView_score__6HG89\",\"text\":\"DetailsView_text__yW8YS\"};","import { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport No_poster from '../images/No_poster.png';\nimport s from './DetailsView.module.css';\n\nexport const DetailsView = ({\n  poster,\n  title,\n  year,\n  score,\n  genres,\n  overview,\n}) => {\n  return (\n    <div className={s.tumb}>\n      <h2 className={s.title}>\n        {title} ({year})\n      </h2>\n      <p className={s.score}>Score: {score}</p>\n      <div>\n        {poster ? (\n          <img\n            className={s.image}\n            src={`https://image.tmdb.org/t/p/w300${poster}`}\n            alt={title}\n          />\n        ) : (\n          <img className={s.image} src={No_poster} alt={'Poster not found'} />\n        )}\n      </div>\n\n      <h3 className={s.genres}>\n        Genres:\n        {genres &&\n          genres.map(genre => {\n            const id = nanoid();\n            return (\n              <span className={s.genre} key={id}>\n                {genre.name}\n              </span>\n            );\n          })}\n      </h3>\n      <article className={s.text}>{overview}</article>\n    </div>\n  );\n};\n\nDetailsView.protoTypes = {\n  poster: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  year: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  genres: PropTypes.array.isRequired,\n  overview: PropTypes.string.isRequired,\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"MovieDetailsPage_main__8bpr5\",\"back_btn\":\"MovieDetailsPage_back_btn__bLRGd\",\"detailsContainer\":\"MovieDetailsPage_detailsContainer__79bdt\",\"details_link\":\"MovieDetailsPage_details_link__4qFZp\",\"loading\":\"MovieDetailsPage_loading__6xFmh\",\"message\":\"MovieDetailsPage_message__1wHSS\"};","import { useState, useEffect } from 'react';\nimport { useParams, Link, Outlet, useNavigate } from 'react-router-dom';\nimport { ViewFilm } from 'services/FetchFilms';\nimport { DetailsView } from 'components/DetailsView/DetailsView';\nimport s from './MovieDetailsPage.module.css';\n\nconst MoviesDetailsPage = () => {\n  const { itemId } = useParams();\n  const navigate = useNavigate();\n  const [film, setFilm] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const onBack = () => {\n    navigate(-1);\n  };\n\n  const getYear = date => {\n    return new Date(date).getFullYear();\n  };\n\n  useEffect(() => {\n    const getFilm = async () => {\n      setLoading(true);\n      try {\n        const response = await ViewFilm(itemId);\n        if (response.data.length === 0) {\n          return;\n        }\n        setFilm(response.data);\n      } catch (error) {\n        console.log(error);\n        setFilm(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getFilm();\n  }, [itemId]);\n\n  return (\n    <>\n      {loading && <div className={s.loading}> Loading...</div>}\n      <button className={s.back_btn} onClick={onBack}>\n        Go back\n      </button>\n      <main className={s.main}>\n        {film ? (\n          <DetailsView\n            poster={film.poster_path}\n            title={film.original_title}\n            year={getYear(film.release_date)}\n            score={film.vote_average}\n            genres={film.genres}\n            overview={film.overview}\n          />\n        ) : (\n          <p className={s.message}>Film not found</p>\n        )}\n        <div className={s.detailsContainer}>\n          <Link className={s.details_link} to={`/movies/${itemId}/cast`}>\n            Cast\n          </Link>\n          <Link className={s.details_link} to={`/movies/${itemId}/reviews`}>\n            Reviews\n          </Link>\n          <Outlet />\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default MoviesDetailsPage;\n","import axios from 'axios';\n\nconst API_KEY = '19261be26ee50f4d2c275bad83bad0b4';\n\nexport const TrendingFilms = async () => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}`\n  );\n};\nexport const ViewFilm = async id => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n};\n\nexport const FilmCast = async id => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n};\n\nexport const FilmReviews = async id => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n};\n\nexport const SearchFilm = async key_word => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${key_word}`\n  );\n};\n"],"names":["DetailsView","poster","title","year","score","genres","overview","className","s","src","alt","No_poster","map","genre","id","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","name","protoTypes","PropTypes","date","itemId","useParams","navigate","useNavigate","useState","film","setFilm","loading","setLoading","useEffect","getFilm","ViewFilm","response","data","length","console","log","onClick","poster_path","original_title","release_date","Date","getFullYear","vote_average","to","API_KEY","TrendingFilms","axios","FilmCast","FilmReviews","SearchFilm","key_word"],"sourceRoot":""}